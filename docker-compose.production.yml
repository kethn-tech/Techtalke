services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: techtalke-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - server-1
      - server-2
      - client
    networks:
      - techtalke-network

  # Backend Server - Instance 1
  server-1:
    image: ${SERVER_IMAGE:-ghcr.io/kethn-tech/techtalke-server:main}
    container_name: techtalke-server-1
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - CLIENT_URL=https://techtalke.app
      - REDIS_URL=${REDIS_URL}
      - PORT=4000
      - JWT_SECRET=${JWT_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CORS_ALLOWED_ORIGINS=https://techtalke.app
      - SERVER_INSTANCE=1
    expose:
      - "4000"
    depends_on:
      - mongodb-primary
      - redis-cluster-1
    volumes:
      - server_uploads:/app/uploads
      - server_logs_1:/app/logs
    networks:
      - techtalke-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Server - Instance 2
  server-2:
    image: ${SERVER_IMAGE:-ghcr.io/kethn-tech/techtalke-server:main}
    container_name: techtalke-server-2
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - CLIENT_URL=https://techtalke.app
      - REDIS_URL=${REDIS_URL_2}
      - PORT=4000
      - JWT_SECRET=${JWT_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CORS_ALLOWED_ORIGINS=https://techtalke.app
      - SERVER_INSTANCE=2
    expose:
      - "4000"
    depends_on:
      - mongodb-primary
      - redis-cluster-2
    volumes:
      - server_uploads:/app/uploads
      - server_logs_2:/app/logs
    networks:
      - techtalke-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  client:
    image: ${CLIENT_IMAGE:-ghcr.io/kethn-tech/techtalke-client:main}
    container_name: techtalke-client-prod
    restart: unless-stopped
    environment:
      - VITE_APP_SERVER_URL=https://techtalke.app/api
      - NODE_ENV=production
    expose:
      - "5173"
    networks:
      - techtalke-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # MongoDB Primary
  mongodb-primary:
    image: mongo:6.0
    container_name: techtalke-mongodb-primary
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: techtalke_production
    ports:
      - "27017:27017"
    volumes:
      - mongodb_primary_data:/data/db
      - mongodb_backups:/backup
      - ./scripts/mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - techtalke-network
    command: --auth --bind_ip_all --replSet rs0
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # MongoDB Secondary (for read replicas)
  mongodb-secondary:
    image: mongo:6.0
    container_name: techtalke-mongodb-secondary
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    expose:
      - "27017"
    volumes:
      - mongodb_secondary_data:/data/db
    networks:
      - techtalke-network
    command: --auth --bind_ip_all --replSet rs0
    depends_on:
      - mongodb-primary

  # Redis Cluster Node 1
  redis-cluster-1:
    image: redis:7-alpine
    container_name: techtalke-redis-1
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    expose:
      - "6379"
    volumes:
      - redis_data_1:/data
    networks:
      - techtalke-network

  # Redis Cluster Node 2
  redis-cluster-2:
    image: redis:7-alpine
    container_name: techtalke-redis-2
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    expose:
      - "6379"
    volumes:
      - redis_data_2:/data
    networks:
      - techtalke-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: techtalke-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - techtalke-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: techtalke-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - techtalke-network

  # Log Management
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: techtalke-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - techtalke-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: techtalke-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - server_logs_1:/logs/server-1:ro
      - server_logs_2:/logs/server-2:ro
      - nginx_logs:/logs/nginx:ro
    depends_on:
      - elasticsearch
    networks:
      - techtalke-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: techtalke-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - techtalke-network

volumes:
  mongodb_primary_data:
  mongodb_secondary_data:
  mongodb_backups:
  redis_data_1:
  redis_data_2:
  server_uploads:
  server_logs_1:
  server_logs_2:
  nginx_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  techtalke-network:
    driver: bridge