name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      client-image: ${{ steps.meta-client.outputs.tags }}
      server-image: ${{ steps.meta-server.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Client
      id: meta-client
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-client
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Extract metadata for Server
      id: meta-server
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Client Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Client
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-client.outputs.tags }}
        labels: ${{ steps.meta-client.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Server Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Server
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-server.outputs.tags }}
        labels: ${{ steps.meta-server.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.techtalke.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          # Navigate to project directory
          cd /opt/techtalke
          
          # Pull latest images
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Update environment-specific docker-compose file
          export CLIENT_IMAGE="${{ needs.build-and-push.outputs.client-image }}"
          export SERVER_IMAGE="${{ needs.build-and-push.outputs.server-image }}"
          
          # Pull new images
          docker pull $CLIENT_IMAGE
          docker pull $SERVER_IMAGE
          
          # Update docker-compose with new image tags
          envsubst < docker-compose.staging.yml > docker-compose.tmp.yml
          
          # Deploy with zero downtime
          docker-compose -f docker-compose.tmp.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Health check
          sleep 30
          curl -f http://localhost:4000/health || exit 1
          
          echo "Staging deployment successful!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://techtalke.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          # Navigate to project directory
          cd /opt/techtalke
          
          # Create backup
          docker-compose exec mongodb mongodump --out /backup/$(date +%Y%m%d_%H%M%S)
          
          # Pull latest images
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          export CLIENT_IMAGE="${{ needs.build-and-push.outputs.client-image }}"
          export SERVER_IMAGE="${{ needs.build-and-push.outputs.server-image }}"
          
          docker pull $CLIENT_IMAGE
          docker pull $SERVER_IMAGE
          
          # Blue-green deployment
          envsubst < docker-compose.production.yml > docker-compose.tmp.yml
          
          # Deploy new version
          docker-compose -f docker-compose.tmp.yml up -d
          
          # Health check
          sleep 60
          curl -f http://localhost:4000/health || exit 1
          
          # Clean up
          docker image prune -f
          
          echo "Production deployment successful!"
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          - Automated deployment via GitHub Actions
          - Docker images: 
            - Client: ${{ needs.build-and-push.outputs.client-image }}
            - Server: ${{ needs.build-and-push.outputs.server-image }}
        draft: false
        prerelease: false

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    
    steps:
    - name: Rollback staging
      if: needs.deploy-staging.result == 'failure'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/techtalke
          docker-compose down
          git checkout HEAD~1
          docker-compose up -d
    
    - name: Rollback production
      if: needs.deploy-production.result == 'failure'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/techtalke
          docker-compose down
          git checkout HEAD~1
          docker-compose up -d