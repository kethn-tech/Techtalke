name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-client:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Client/package-lock.json
    
    - name: Install dependencies
      run: |
        cd Client
        npm ci
    
    - name: Run ESLint
      run: |
        cd Client
        npm run lint
    
    - name: Build client
      run: |
        cd Client
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: Client/dist/
        retention-days: 1

  test-server:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: testpassword
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Server/package-lock.json
    
    - name: Install dependencies
      run: |
        cd Server
        npm ci
    
    - name: Create test env file
      run: |
        cd Server
        cat > .env << EOF
        NODE_ENV=test
        DATABASE_URL=mongodb://admin:testpassword@localhost:27017/techtalke_test?authSource=admin
        CLIENT_URL=http://localhost:5173
        PORT=4000
        JWT_SECRET=test_jwt_secret_key_for_testing_only
        REDIS_URL=disabled
        EOF
    
    - name: Run server tests (if any)
      run: |
        cd Server
        # Add your test command here when you have tests
        # npm test
        echo "Server tests would run here"
    
    - name: Test server startup
      run: |
        cd Server
        timeout 30s npm start &
        sleep 10
        curl -f http://localhost:4000/health || echo "Health check endpoint not available"

  security-scan:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Audit Client dependencies
      run: |
        cd Client
        npm audit --audit-level=high
    
    - name: Audit Server dependencies
      run: |
        cd Server
        npm audit --audit-level=high
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-client, test-server]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Client Docker image
      run: |
        docker build -t techtalke-client:test ./Client
    
    - name: Build Server Docker image
      run: |
        docker build -t techtalke-server:test ./Server
    
    - name: Test Docker Compose
      run: |
        # Create test environment files
        cp Client/env.example Client/.env || echo "VITE_APP_SERVER_URL=http://localhost:4000" > Client/.env
        cp Server/env.example Server/.env || cat > Server/.env << EOF
        DATABASE_URL=mongodb://admin:techtalke_secure_password@mongodb:27017/techtalke_chat?authSource=admin
        CLIENT_URL=http://localhost:5173
        PORT=4000
        JWT_SECRET=test_jwt_secret_key
        REDIS_URL=disabled
        EOF
        
        # Test docker-compose configuration
        docker-compose -f docker-compose.yml config